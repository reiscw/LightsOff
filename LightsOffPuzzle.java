import java.io.*;
import java.util.*;

// https://en.wikipedia.org/wiki/Lights_Out_(game)
// The above reference gives a mathematical rule for determining if a puzzle 
// is solvable. Essentially, the puzzle expressed as a 1D vector must be 
// orthogonal to two constant vectors shown below.  This provides 32 configurations
// which can be used to generate other puzzles through toggling.

// The mathematics works out that a puzzle can be generated by keeping all squares
// off except for some combination of positions (1, 1), (1, 3), (2, 2), (3, 1), and
// (3, 3). After the initial configuration is chosen, toggling can be used to 
// create a puzzle (so that there are more than 32 possible games).

public class LightsOffPuzzle {
	
	private int[][] puzzle;
	
	public LightsOffPuzzle() {
		puzzle = new int[5][5];
		puzzle[1][1] = (int)(Math.random()*2);
		puzzle[1][3] = (int)(Math.random()*2);
		puzzle[2][2] = (int)(Math.random()*2);
		puzzle[3][1] = (int)(Math.random()*2);
		puzzle[3][3] = (int)(Math.random()*2);
		for (int i = 0; i < 100; i++) {
			int randomRow = (int)(Math.random()*5);
			int randomCol = (int)(Math.random()*5);
			toggle(randomRow, randomCol);
		}
	}
		
	public void toggle(int r, int c) {
		puzzle[r][c] = (puzzle[r][c] + 1) % 2;
		// left
		if (c > 0) 
			puzzle[r][c-1] = (puzzle[r][c-1] + 1) % 2;
		// right 
		if (c < 4) 
			puzzle[r][c+1] = (puzzle[r][c+1] + 1) % 2;
		// top
		if (r > 0)
			puzzle[r-1][c] = (puzzle[r-1][c] + 1) % 2;
		// bottom
		if (r < 4) 
			puzzle[r+1][c] = (puzzle[r+1][c] + 1) % 2;
	}
	
	public int[][] getPuzzle() {return puzzle;}

}
